/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion_equipo1.RevisionCV;

import CustomControls.RendererConBtn;
import dto.CandidatoDTO;
import filtroIA.FiltroCV;
import filtroIA.IFiltroCV;
import java.awt.Desktop;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import objetosnegocio.CandidatoON;

/**
 *
 * @author Ragzard
 */
public class FiltrarCV extends javax.swing.JFrame {

    IFiltroCV subFiltro = new FiltroCV();
    FiltroCV filtroIA = new FiltroCV();

    List<String> keyWords;
    DefaultListModel<String> listModel;

    //Codigo para pruebas
    List<CandidatoDTO> listaCandidatos = new ArrayList<>();
    CandidatoON candidatoON;

    private List<CandidatoDTO> candidatosMostrados;

    /**
     * Creates new form FiltroCV
     */
    public FiltrarCV() {
        initComponents();

        candidatosMostrados = new ArrayList<>();
        this.setLocationRelativeTo(null);

        jTableCV.setEnabled(true);

        //Codigo para pruebas
        keyWords = new ArrayList<>();//Lista de palabras clave

        listModel = new DefaultListModel<>();
        jListPalabrasClave.setModel(listModel);
        jListPalabrasClave.setCellRenderer(new RendererConBtn());

        jListPalabrasClave.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int index = jListPalabrasClave.locationToIndex(evt.getPoint());
                Rectangle bounds = jListPalabrasClave.getCellBounds(index, index);
                if (bounds != null && index >= 0) {
                    int xRelativo = evt.getX() - bounds.x;
                    int ancho = bounds.width;

                    // Detectar si se clicó cerca del lado derecho (simula la "X")
                    if (xRelativo >= ancho - 20) {
                        keyWords.remove(listModel.get(index));
                        listModel.remove(index);
                    }
                }
            }
        });

        //Definir el modelo de la tabla
        DefaultTableModel modelo = new DefaultTableModel(new String[]{"Nombre", "Apellido", "Teléfono", "Email", "Puesto", "Estado", "Archivo CV"}, 0);

        //Asignar el modelo de la tabla al jTable
        jTableCV.setModel(modelo);

        // Actualizar tabla
        actualizarTabla(candidatoON.getInstance().obtenerCandidatos());

        // Listener para la celda del CV
        jTableCV.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = jTableCV.rowAtPoint(e.getPoint());
                int column = jTableCV.columnAtPoint(e.getPoint());

                // Si la columna es la del archivo PDF (ajusta según el índice)
                if (column == 6 && e.getClickCount() == 2) {
                    if (row >= 0 && row < candidatosMostrados.size()) {
                        CandidatoDTO candidato = candidatosMostrados.get(row);
                        abrirPDFenSistema(candidato.getRutaPDF());
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jTxtPalabraClave = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListPalabrasClave = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCV = new javax.swing.JTable();
        jBtnVolver = new javax.swing.JButton();
        jBtnAgregarCV = new javax.swing.JButton();
        jBtnFiltrar = new javax.swing.JButton();
        jLabelRutaCarpetaCV = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        BtnResumen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 24)); // NOI18N
        jLabel1.setText("Filtrar CV");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jTxtPalabraClave.setText("Ingrese palabra clave");
        jTxtPalabraClave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtPalabraClaveActionPerformed(evt);
            }
        });

        jListPalabrasClave.setEnabled(false);
        jListPalabrasClave.setOpaque(false);
        jScrollPane2.setViewportView(jListPalabrasClave);

        jLabel3.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel3.setText("Lista de candidatos");

        jTableCV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Henry", "Soto", "6681222439", "henrysoto.rz@gmail.com", "Ing. Software", "Filtrado", "Abrir"}
            },
            new String [] {
                "Nombre", "Apellido", "Telefono", "Email", "Puesto", "Estado", "PDF"
            }
        ));
        jTableCV.setEnabled(false);
        jScrollPane3.setViewportView(jTableCV);

        jBtnVolver.setFont(new java.awt.Font("Nirmala UI", 0, 12)); // NOI18N
        jBtnVolver.setText("Volver");
        jBtnVolver.setPreferredSize(new java.awt.Dimension(80, 30));
        jBtnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnVolverActionPerformed(evt);
            }
        });

        jBtnAgregarCV.setFont(new java.awt.Font("Nirmala UI", 0, 12)); // NOI18N
        jBtnAgregarCV.setText("Agregar CV");
        jBtnAgregarCV.setPreferredSize(new java.awt.Dimension(80, 30));
        jBtnAgregarCV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarCVActionPerformed(evt);
            }
        });

        jBtnFiltrar.setFont(new java.awt.Font("Nirmala UI", 0, 12)); // NOI18N
        jBtnFiltrar.setText("Filtrar");
        jBtnFiltrar.setPreferredSize(new java.awt.Dimension(80, 30));
        jBtnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFiltrarActionPerformed(evt);
            }
        });

        jLabelRutaCarpetaCV.setText("../ListaCV");
        jLabelRutaCarpetaCV.setToolTipText("");
        jLabelRutaCarpetaCV.setEnabled(false);

        jButton1.setText("Borrar filtro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarClave(evt);
            }
        });

        BtnResumen.setText("Resumen");
        BtnResumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResumenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBtnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(103, 103, 103)
                                .addComponent(jButton1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTxtPalabraClave)
                                .addComponent(jScrollPane2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BtnResumen, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jBtnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBtnAgregarCV, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelRutaCarpetaCV)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelRutaCarpetaCV))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTxtPalabraClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jBtnAgregarCV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BtnResumen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(jBtnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jBtnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnVolverActionPerformed
        MenuReclutador Menu = new MenuReclutador();
        Menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jBtnVolverActionPerformed

    private void jBtnAgregarCVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarCVActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos PDF", "pdf"));

        int resultado = fileChooser.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = fileChooser.getSelectedFile();
            String nombreArchivo = archivoSeleccionado.getName();

            // Ruta base dinámica
            String rutaBase = System.getProperty("user.dir");
            File carpetaCVs = new File(rutaBase, "../objetos_negocios/src/CVs");
            if (!carpetaCVs.exists()) {
                carpetaCVs.mkdirs();
            }

            // Guardar el archivo con la ruta relativa en el DTO
            File destino = new File(carpetaCVs, nombreArchivo);

            try {
                Files.copy(archivoSeleccionado.toPath(), destino.toPath(), StandardCopyOption.REPLACE_EXISTING);

                // Guardar solo la ruta relativa al archivo en el DTO
                String rutaRelativa = "CVs/" + nombreArchivo;  // Guardamos solo la ruta relativa

                CandidatoDTO candidato = new CandidatoDTO(
                        "NombreDemo",
                        "ApellidoDemo",
                        "1234567890",
                        "correo@demo.com",
                        "Puesto Demo",
                        false,
                        rutaRelativa // Usamos la ruta relativa aquí
                );

                candidatoON.getInstance().agregarCandidato(candidato);
                actualizarTabla(candidatoON.getInstance().obtenerCandidatos());

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al copiar archivo: " + e.getMessage());
            }
        }


    }//GEN-LAST:event_jBtnAgregarCVActionPerformed

    private void jBtnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFiltrarActionPerformed
        if (keyWords.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecciona al menos una palabra clave.");
            return;
        }

        List<CandidatoDTO> todos = candidatoON.getInstance().obtenerCandidatos();
        List<CandidatoDTO> filtrados = subFiltro.filtrarPorPalabrasClave(todos, keyWords);

        // Actualizar los candidatos mostrados y la tabla
        actualizarTabla(filtrados);
    }//GEN-LAST:event_jBtnFiltrarActionPerformed

    private void jTxtPalabraClaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtPalabraClaveActionPerformed
        String palabraClave = jTxtPalabraClave.getText().trim();

        if (!palabraClave.isEmpty() && !keyWords.contains(palabraClave)) {
            keyWords.add(palabraClave);
            listModel.addElement(palabraClave);
        }

        jTxtPalabraClave.setText(null);
    }//GEN-LAST:event_jTxtPalabraClaveActionPerformed

    private void botonBorrarClave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarClave
        keyWords.clear();
        listModel.clear();
        jTxtPalabraClave.setText(null);
    }//GEN-LAST:event_botonBorrarClave

    private void BtnResumenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResumenActionPerformed
        int filaSeleccionada = jTableCV.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this,
                    "Por favor, seleccione un candidato de la tabla.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //usamos el candidato de la lista filtrada en lugar de la lista original para evitar seleccionar el pdf erroneo
        CandidatoDTO candidato = candidatosMostrados.get(filaSeleccionada);

        try {
            //pasamos la lista de palabras clave del relcutador al metodo obtenerResultados
            String resultadoAnalisis = filtroIA.obtenerResultados(candidato, keyWords);

            boolean aceptado = resultadoAnalisis.toLowerCase().contains("cumple con los requisitos");
            candidato.setEstado(aceptado);

            JTextArea textArea = new JTextArea(20, 50);
            textArea.setText(resultadoAnalisis);
            textArea.setWrapStyleWord(true);
            textArea.setLineWrap(true);
            textArea.setCaretPosition(0);
            textArea.setEditable(false);

            JScrollPane scrollPane = new JScrollPane(textArea);

            JOptionPane.showMessageDialog(this,
                    scrollPane,
                    "Resultado del Filtro",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al procesar el CV: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BtnResumenActionPerformed

    private void actualizarTabla(List<CandidatoDTO> lista) {
        DefaultTableModel model = (DefaultTableModel) jTableCV.getModel();
        model.setRowCount(0); // limpiar tabla

        //se almacena la nueva lista de candidatos mostrados
        this.candidatosMostrados = new ArrayList<>(lista);

        for (CandidatoDTO c : lista) {
            model.addRow(new Object[]{
                c.getNombre(),
                c.getApellidos(),
                c.getTelefono(),
                c.getCorreo(),
                c.getPuesto(),
                c.isEstado() ? "Aprobado" : "Rechazado",
                c.getRutaPDF()
            });
        }
    }

    /**
     *
     * @param nombreArchivoCV
     */
    private void abrirPDFenSistema(String rutaPDF) {
        // Construir la ruta completa desde la relativa
        try {
            File archivo = new File(System.getProperty("user.dir") + "/../objetos_negocios/src/" + rutaPDF);

            if (archivo.exists()) {
                Desktop.getDesktop().open(archivo);
            } else {
                JOptionPane.showMessageDialog(this,
                        "No se pudo encontrar el archivo PDF: " + archivo.getAbsolutePath(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Error al abrir el PDF: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FiltrarCV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FiltrarCV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FiltrarCV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FiltrarCV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FiltrarCV().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnResumen;
    private javax.swing.JButton jBtnAgregarCV;
    private javax.swing.JButton jBtnFiltrar;
    private javax.swing.JButton jBtnVolver;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelRutaCarpetaCV;
    private javax.swing.JList<String> jListPalabrasClave;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTableCV;
    private javax.swing.JTextField jTxtPalabraClave;
    // End of variables declaration//GEN-END:variables
}
