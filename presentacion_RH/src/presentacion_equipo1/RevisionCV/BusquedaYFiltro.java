/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion_equipo1.RevisionCV;

import CustomControls.RendererConBtn;
import dto.CandidatoDTO;
import dto.ReclutadorDTO;
import entidades.Candidato;
import entidades.Reclutador;
import filtroIA.FiltroCV;
import filtroIA.IFiltroCV;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import objetosnegocio.BusquedaON;
import objetosnegocio.CandidatoON;
import objetosnegocio.ReclutadorDAO;

/**
 *
 * @author Adrián
 */
public class BusquedaYFiltro extends javax.swing.JFrame {

    List<String> keyWords;
    DefaultListModel<String> listModel;
    BusquedaON busqueda;

    //Codigo para pruebas
    List<Candidato> listaCandidatos = new ArrayList<>();
    CandidatoON candidatoON;

    List<Reclutador> listaReclutador = new ArrayList<>();
    ReclutadorDAO reclutadorON;

    private List<Candidato> candidatosMostrados;
    private List<Reclutador> reclutadoresMostrados;

    public BusquedaYFiltro() {
        initComponents();
        candidatosMostrados = new ArrayList<>();
        reclutadoresMostrados = new ArrayList<>();
        this.setLocationRelativeTo(null);

        busqueda = BusquedaON.getInstance();
        candidatoON = CandidatoON.getInstance(); // si es singleton
        reclutadorON = ReclutadorDAO.getInstance();

        tablaCendidatosyReclutadores.setEnabled(true);

// Código para pruebas
        keyWords = new ArrayList<>();
        listModel = new DefaultListModel<>();
        jListPalabrasClave.setModel(listModel);
        jListPalabrasClave.setCellRenderer(new RendererConBtn());
        jListPalabrasClave.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int index = jListPalabrasClave.locationToIndex(evt.getPoint());
                Rectangle bounds = jListPalabrasClave.getCellBounds(index, index);
                if (bounds != null && index >= 0) {
                    int xRelativo = evt.getX() - bounds.x;
                    int ancho = bounds.width;
                    if (xRelativo >= ancho - 20) {
                        keyWords.remove(listModel.get(index));
                        listModel.remove(index);
                    }
                }
            }
        });

        System.out.println("Cargando candidatos en la tabla...");
        List<CandidatoDTO> candidatosDTO = candidatoON.obtenerCandidatos();
        List<Candidato> candidatos = new ArrayList<>();

        for (CandidatoDTO dto : candidatosDTO) {
            Candidato c = new Candidato();
            c.setNombre(dto.getNombre());
            c.setApellidoPaterno(dto.getApellidoPaterno());
            c.setApellidoMaterno(dto.getApellidoMaterno());
            c.setTelefono(dto.getTelefono());
            c.setCorreo(dto.getCorreo());
            c.setPuesto(dto.getPuesto());
            c.setEstado(dto.isEstado());
            c.setRutaPDF(dto.getRutaPDF());
            candidatos.add(c);
        }
        System.out.println("Candidatos obtenidos: " + candidatos.size());

        System.out.println("Cargando reclutadores en la tabla...");
        List<Reclutador> reclutadores = reclutadorON.obtenerTodos();
        System.out.println("Reclutadores obtenidos: " + reclutadores.size());

        actualizarTabla(candidatos, reclutadores);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        barraBusqueda = new javax.swing.JTextField();
        Volver = new javax.swing.JButton();
        jBtnFiltrar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListPalabrasClave = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaCendidatosyReclutadores = new javax.swing.JTable();
        btnReiniciar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/rhfoto2.png"))); // NOI18N

        barraBusqueda.setText("Inserte contenido a buscar");
        barraBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barraBusquedaActionPerformed(evt);
            }
        });

        Volver.setText("Volver");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });

        jBtnFiltrar.setFont(new java.awt.Font("Nirmala UI", 0, 12)); // NOI18N
        jBtnFiltrar.setText("Filtrar");
        jBtnFiltrar.setPreferredSize(new java.awt.Dimension(80, 30));
        jBtnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFiltrarActionPerformed(evt);
            }
        });

        jListPalabrasClave.setEnabled(false);
        jListPalabrasClave.setOpaque(false);
        jScrollPane2.setViewportView(jListPalabrasClave);

        tablaCendidatosyReclutadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Henry", "Soto", null, "Ing. Software", "Filtrado"}
            },
            new String [] {
                "Nombre", "Apellido Paterno", "Apellido Materno", "Puesto", "Estado"
            }
        ));
        tablaCendidatosyReclutadores.setEnabled(false);
        jScrollPane4.setViewportView(tablaCendidatosyReclutadores);

        btnReiniciar.setText("Reiniciar");
        btnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Volver)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReiniciar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(barraBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(17, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barraBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Volver)
                            .addComponent(btnReiniciar))
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void barraBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barraBusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barraBusquedaActionPerformed

    private void jBtnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFiltrarActionPerformed
        String textoBusqueda = barraBusqueda.getText().trim();

        if (textoBusqueda.isEmpty() && keyWords.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un término de búsqueda o seleccione palabras clave.");
            return;
        }

        List<Object> resultados;

        //buscar por palabras clave
        if (!keyWords.isEmpty()) {
            resultados = busqueda.buscarPorPalabrasClave(keyWords);
        } else {
            //si no hay palabras clave, buscar por el texto en la barra de busqueda
            resultados = busqueda.buscarPorNombre(textoBusqueda);
        }

        //mostrar resultados
        if (resultados != null && resultados.size() >= 2) {
            List<Candidato> candidatos = (List<Candidato>) resultados.get(0);
            List<Reclutador> reclutadores = (List<Reclutador>) resultados.get(1);
            actualizarTabla(candidatos, reclutadores);
        }

        //agregar la palabra actual a las palabras clave
        if (!textoBusqueda.isEmpty() && !keyWords.contains(textoBusqueda)) {
            keyWords.add(textoBusqueda);
            listModel.addElement(textoBusqueda);
            barraBusqueda.setText(""); // Limpiar la barra de búsqueda
        }

    }//GEN-LAST:event_jBtnFiltrarActionPerformed

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
        MenuReclutador Menu = new MenuReclutador();
        Menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VolverActionPerformed

    private void btnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarActionPerformed
        keyWords.clear();             //limpia palabras clave
        listModel.clear();            //limpia lista visual de palabras clave
        barraBusqueda.setText("");    //limpia el campo de texto

        //actualizar tabla despues de borrar el filtro
        List<CandidatoDTO> candidatosDTO = candidatoON.obtenerCandidatos();
        List<Candidato> todosCandidatos = new ArrayList<>();

        for (CandidatoDTO dto : candidatosDTO) {
            Candidato c = new Candidato();
            c.setNombre(dto.getNombre());
            c.setApellidoPaterno(dto.getApellidoPaterno());
            c.setApellidoMaterno(dto.getApellidoMaterno());
            c.setTelefono(dto.getTelefono());
            c.setCorreo(dto.getCorreo());
            c.setPuesto(dto.getPuesto());
            c.setEstado(dto.isEstado());
            c.setRutaPDF(dto.getRutaPDF());
            todosCandidatos.add(c);
        }
        List<Reclutador> todosReclutadores = reclutadorON.obtenerTodos();

        actualizarTabla(todosCandidatos, todosReclutadores);
    }//GEN-LAST:event_btnReiniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BusquedaYFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BusquedaYFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BusquedaYFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BusquedaYFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BusquedaYFiltro().setVisible(true);
            }
        });
    }

    //buscar criterio
    private void buscarPorCriterio(String criterio, String tipo) {
        List<Object> resultados = null;

        switch (tipo.toLowerCase()) {
            case "nombre":
                resultados = busqueda.buscarPorNombre(criterio);
                break;
            case "apellidopaterno":
                resultados = busqueda.buscarPorApellidoPaterno(criterio);
                break;
            case "apellidomaterno":
                resultados = busqueda.buscarPorApellidoMaterno(criterio);
                break;
            case "puesto":
                resultados = busqueda.buscarPorPuesto(criterio);
                break;
        }

        if (resultados != null && resultados.size() >= 2) {
            List<Candidato> candidatos = (List<Candidato>) resultados.get(0);
            List<Reclutador> reclutadores = (List<Reclutador>) resultados.get(1);
            actualizarTabla(candidatos, reclutadores);
        }
    }

    //buscar por estado del candidato o reclutador
    private void buscarPorEstado(boolean estado) {
        List<Object> resultados = busqueda.buscarPorEstado(estado);

        if (resultados != null && resultados.size() >= 2) {
            List<Candidato> candidatos = (List<Candidato>) resultados.get(0);
            List<Reclutador> reclutadores = (List<Reclutador>) resultados.get(1);
            actualizarTabla(candidatos, reclutadores);
        }
    }

    private void actualizarTabla(List<Candidato> listaC, List<Reclutador> listaR) {
        String[] columnas = {"Nombre", "Apellido Paterno", "Apellido Materno", "Puesto", "Estado"};
        DefaultTableModel model = new DefaultTableModel(columnas, 0); // limpiar tabla

        this.candidatosMostrados = new ArrayList<>(listaC != null ? listaC : new ArrayList<>());
        this.reclutadoresMostrados = new ArrayList<>(listaR != null ? listaR : new ArrayList<>());

        if (listaC != null) {
            for (Candidato c : listaC) {
                model.addRow(new Object[]{
                    c.getNombre(),
                    c.getApellidoPaterno(),
                    c.getApellidoMaterno(),
                    c.getPuesto(),
                    c.isEstado() ? "Aprobado" : "Rechazado",
                    c.getRutaPDF()
                });
            }
        }

        if (listaR != null) {
            for (Reclutador r : listaR) {
                model.addRow(new Object[]{
                    r.getNombreCompleto(),
                    r.getApellidoPaterno(),
                    r.getApellidoMaterno(),
                    r.getPuesto(),
                    r.isEstado() ? "Aprobado" : "Rechazado",
                    "" // RutaPDF (vacío para reclutadores)
                });
            }
        }
        tablaCendidatosyReclutadores.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Volver;
    private javax.swing.JTextField barraBusqueda;
    private javax.swing.JButton btnReiniciar;
    private javax.swing.JButton jBtnFiltrar;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListPalabrasClave;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tablaCendidatosyReclutadores;
    // End of variables declaration//GEN-END:variables
}
